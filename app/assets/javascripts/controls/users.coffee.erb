window.Users = can.Control({

  init: (el, opts) ->
    @el = el
    @di = opts.domain_id
    @dname = opts.domain_name
    @model = opts.items
    @dname = opts.domain_name
    @refresh()

  show_title: (type) ->
    $(@el).find('h4 span').hide()
    type = (if type.length then '_' else '') + type
    $(@el).find('h4 .title' + type).show()

  refresh: () ->
    $(@el).find('table').html( can.view( 'vusers_each_EJS', {
      items: @model
      domain_name: @dname
    } ) )

  "form reset": (el, ev) ->
    @refresh()
    @show_title('')

  ".edit-user click": (el, ev) ->
    ev.preventDefault()
    @show_title('edit')
    @el.find('.table tr').hide()
    li = el.parents('tr')
    id = li.attr('id').replace('user_', '')
    di = @model[id].virtual_domain_id
    li.html(
      can.view( 'vusers_form_EJS', {item: @model[id], domain_name: @dname} )
    ).find('input[type=submit]').attr('value','<%=I18n.t('update')%>')
    li.find('form').attr('action', (i, v) ->
      return unescape(v).replace(/{domain_id}/g, di)
    ).addClass('edit_user').find('.email').append(
      ''#'<span class="add-on">@'+@dname+'</span>'
    )
    li.show()
    return false


  ".edit_user submit": (el, ev) ->
    ev.preventDefault()
    values = el.formParams()
    id = el.parents('tr').attr('id').replace('user_', '')
    item = @model[id]
    item.attr(values['virtual_user'])
    if item.errors()
      item.alert()
      return
    User.update(values, item, el.attr('action'))
    @show_title('')
    @refresh()
    return false


  ".new-user click": (el, ev) ->
    ev.preventDefault()
    @show_title('new')
    @el.find('.table tr').hide()
    di = @di
    $('#domain_'+di+' .users .new').remove()
    $('#domain_'+di+' .users table').prepend(can.view( 'vusers_tabr_EJS' ))
    $('#domain_'+di+' .users .new').prepend(
      can.view( 'vusers_form_EJS', { item: new User } )
    ).find('form').attr('action', (i, v) ->
      return unescape(v).replace(/{domain_id}/g, di)
    )
    @el.find('.table tr:first').show()
    return false

  ".new form submit": (el, ev) ->
    ev.preventDefault()
    li = el.parents('.new')
    self = this
    values = el.formParams()
    item = new User(values["virtual_user"])
    if item.errors()
      item.alert()
      return
    User.create(values, @di, (json) ->
      if json["errors"]
        alert(json["errors"])
      else
        li.removeClass('new').attr('id', 'user_'+json.id)
        self.model.unshift(item)
        self.show_title('')
        self.refresh()
    )

})
